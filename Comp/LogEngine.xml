<?xml version="1.0"?>
<doc>
<assembly>
<name>
LogEngine
</name>
</assembly>
<members>
<member name="T:LogEngine.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:LogEngine.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:LogEngine.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:LogEngine.LogEngine.Logdata">
 <summary>
 Retorna una lista con todos los eventos en el LOG hasta el momento que se solicita.
 </summary>
 <returns></returns>
</member>
<member name="P:LogEngine.LogEngine.LogUserData">
 <summary>
 Retorna una lista con los usuarios que tienen programados avisos de inactividad.
 </summary>
 <returns></returns>
</member>
<member name="P:LogEngine.LogEngine.EndLog">
 <summary>
 Si se establece como true, finaliza toda actividad de log y los eventos siguientes no serán guardados en el archivo de LOG (Pero sí en memoria). Es recomendable usar el método .Dispose en su lugar.
 </summary>
 <returns></returns>
</member>
<member name="M:LogEngine.LogEngine.#ctor(System.String,System.String,System.String)">
 <summary>
 Crea una nueva instancia del motor de registros locales.
 </summary>
 <param name="LogPath">Archivo con ruta donde se guardará el archivo de LOG.</param>
 <param name="UserPath">Archivo con ruta donde se guardará el archivo de usuarios.</param>
</member>
<member name="M:LogEngine.LogEngine.EndLogging">
 <summary>
 Cierra los eventos de log correctamente.
 </summary>
</member>
<member name="M:LogEngine.LogEngine.Log(System.String,System.String)">
 <summary>
 Registra un evento normal.
 </summary>
 <param name="message">Texto del evento</param>
 <param name="source">origen del evento</param>
 <returns></returns>
</member>
<member name="M:LogEngine.LogEngine.Debug_Log(System.String,System.String)">
 <summary>
 Registra un evento de tipo debug.
 </summary>
 <param name="message">Texto del evento</param>
 <param name="source">origen del evento</param>
 <returns></returns>
</member>
<member name="M:LogEngine.LogEngine.EX_Log(System.String,System.String)">
 <summary>
 Registra una excepción.
 </summary>
 <param name="message">Texto del evento</param>
 <param name="source">origen del evento</param>
 <returns></returns>
</member>
<member name="M:LogEngine.LogEngine.Log(System.String,System.String,System.String)">
 <summary>
 Inicia otro thread para guardar un evento de log
 </summary>
 <param name="message">Texto a registrar</param>
 <param name="source">Fuente del evento</param>
 <param name="user">Usuario origen del evento</param>
 <returns></returns>
</member>
<member name="M:LogEngine.LogEngine.Debug_Log(System.String,System.String,System.String)">
 <summary>
 Inicia otro thread para guardar un evento de log (debug)
 </summary>
 <param name="message">Texto a registrar</param>
 <param name="source">Fuente del evento</param>
 <param name="user">Usuario origen del evento</param>
 <returns></returns>
</member>
<member name="M:LogEngine.LogEngine.EX_Log(System.String,System.String,System.String)">
 <summary>
 Inicia otro thread para guardar un evento de log
 </summary>
 <param name="message">Texto a registrar</param>
 <param name="source">Fuente del evento</param>
 <param name="user">Usuario origen del evento</param>
 <returns></returns>
</member>
<member name="M:LogEngine.LogEngine.SaveUsersToFile">
 <summary>
 Guarda todos los usuarios y operadores en memoria al archivo.
 </summary>
 <returns></returns>
</member>
<member name="M:LogEngine.LogEngine.SetUserTime(System.String[])">
 <summary>
 Añade un nuevo usuario a la lista de aviso de inactividad de usuario
 </summary>
 <param name="UserAndTime">Array con {usuario a avisar, tiempo en formato d.hh:mm, operador} </param>
 <returns></returns>
</member>
<member name="M:LogEngine.LogEngine.LoadUsers">
 <summary>
 Carga los usuarios desde el archivo de usuarios y los guarda en la variable local.
 </summary>
 <returns></returns>
</member>
<member name="M:LogEngine.LogEngine.WriteLine(System.String,System.String,System.String)">
 <summary>
 Escribe una línea en la salida del programa a modo de registro siguiendo un formato estándar 
 (en realidad es completamente arbitrario pero está ordenado y bonito :) ).
 </summary>
 <param name="type">Tipo de registro</param>
 <param name="source">Origen del registro</param>
 <param name="message">Mensaje de salida</param>
</member>
<member name="M:LogEngine.LogEngine.PsvSafeEncode(System.String)">
 <summary>
 Codifica texto para ser guardado en el LOG.
 </summary>
 <param name="text">Texto a codificar</param>
 <returns></returns>
</member>
<member name="M:LogEngine.LogEngine.PsvSafeDecode(System.String)">
 <summary>
 Decodifica texto guardado en el LOG.
 </summary>
 <param name="text">Texto a decodificar.</param>
 <returns></returns>
</member>
<member name="M:LogEngine.LogEngine.SaveLogWorker">
 <summary>
 Guarda los datos en el archivo de log, es llamado por otros threads.
 </summary>
</member>
<member name="M:LogEngine.LogEngine.SaveData(System.String,System.Collections.Generic.Queue{System.String[]}@)">
 <summary>
 Guarda los datos desde un queue a un archivo de log.
 </summary>
 <param name="filepath"></param>
 <param name="_queue"></param>
 <returns></returns>
</member>
<member name="M:LogEngine.LogEngine.AddEvent(System.String,System.String,System.String,System.String)">
 <summary>
 Añade un evento al queue
 </summary>
 <param name="text">Texto a registrar</param>
 <param name="Source">Fuente del evento</param>
 <param name="User">Usuario origen del evento</param>
 <param name="Type">Tipo de evento</param>
 <returns></returns>
</member>
<member name="M:LogEngine.LogEngine.Lastlog(System.String@,System.String)">
 <summary>
 Entrega el último registro de eventos.
 </summary>
 <param name="source">Fuente desde donde se solicita el último evento.</param>
 <param name="user">Usuario que lo solicita.</param>
 <returns></returns>
</member>
<member name="M:LogEngine.LogEngine.AppendLinesToText(System.String,System.String[])">
 <summary>
 Añade líneas a un archivo de texto.
 </summary>
 <param name="FilePath">Ruta y nombre del archivo</param>
 <param name="Lines">Líneas a añadir</param>
 <returns></returns>
</member>
<member name="M:LogEngine.LogEngine.GetUsersFromFile">
 <summary>
 Obtiene los usuarios desde el el archivo y los regresa como string()
 </summary>
 <returns></returns>
</member>
<member name="M:LogEngine.LogEngine.SafeEnqueue(System.Collections.Generic.Queue{System.String[]},System.String[])">
 <summary>
 Añade un item al queue de forma segura para ser llamado desde múltiples threads.
 </summary>
 <param name="_QueueToEnqueue">Queue a modificar</param>
 <param name="str">Cadea de texto a añadir</param>
</member>
<member name="M:LogEngine.LogEngine.SafeDequeue(System.Collections.Generic.Queue{System.String[]})">
 <summary>
 Saca un ítem de un queue de forma segura para ser llamado desde múltiples threads.
 </summary>
 <param name="QueueToDequeue"></param>
 <returns></returns>
</member>
</members>
</doc>
